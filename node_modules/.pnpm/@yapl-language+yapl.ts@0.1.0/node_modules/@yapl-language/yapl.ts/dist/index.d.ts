export declare interface Prompt {
    content: string;
    usedFiles: string[];
}

/**
 * Markdown-it plugin to protect YAPL-like syntax from Vue template compilation.
 *
 * It wraps code fences, indented code blocks, and inline code that contain
 * YAPL/Jinja-like delimiters ({{ ... }} or {% ... %}), or that are tagged
 * with a language info string including "yapl", in a Vue v-pre container.
 *
 * This prevents Vue (VitePress/VuePress) from trying to parse the contents
 * as JavaScript template expressions.
 */
export declare function protectYaplPlugin(md: any): void;

export declare interface RendererOptions {
    baseDir?: string;
    strictPaths?: boolean;
    maxDepth?: number;
    whitespace?: WhitespaceOptions;
    resolvePath?: (templateRef: string, fromDir: string, ensureExt: (p: string) => string) => string;
    loadFile?: (absolutePath: string) => Promise<string>;
    ensureExtension?: (p: string) => string;
}

export declare type Vars = Record<string, unknown>;

export declare interface WhitespaceOptions {
    trimBlocks?: boolean;
    lstripBlocks?: boolean;
    dedentBlocks?: boolean;
}

export declare class YAPL {
    protected baseDir: string;
    protected renderer: YAPLRenderer;
    constructor(opts: YAPLOptions);
    setBaseDir(dir: string): void;
    renderString(templateSource: string, vars?: Record<string, unknown>, currentDir?: string): Promise<Prompt>;
    render(_templatePath: string, _vars?: Record<string, unknown>): Promise<Prompt>;
}

export declare interface YAPLOptions {
    baseDir: string;
    cache?: boolean;
    strictPaths?: boolean;
    maxDepth?: number;
    whitespace?: WhitespaceOptions;
}

declare class YAPLRenderer {
    private baseDir;
    private strictPaths;
    private maxDepth;
    private whitespaceOptions;
    private resolvePath?;
    private loadFile?;
    private ensureExtension;
    constructor(opts?: RendererOptions);
    setBaseDir(dir: string): void;
    renderString(templateSource: string, vars?: Vars, currentDir?: string): Promise<Prompt>;
    private processTemplate;
    private processTemplateInheritance;
    private extractDirective;
    private stripDirectives;
    private processDirectives;
    private processIncludeDirective;
    private processStandaloneBlocks;
    private extractBlockDefinitions;
    private collectBlocksFromMixins;
    private mergeBlocksInto;
    private mergeBlocksWithSuper;
    private processIfElseStatements;
    private processNestedIfStatements;
    private processSingleIfStatement;
    private findMatchingEndif;
    private processVariableInterpolation;
    private applyBlockOverridesToParent;
    private resolveTemplatePath;
    private loadTemplateFile;
    private dirname;
    private replaceAsync;
}

export { }
